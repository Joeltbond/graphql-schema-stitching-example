// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import { Product, Category } from "./prisma-client";
import { Context } from "../types";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export type AllProductsResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Product[] | null | Promise<Product[] | null>;

  export type AllCategoriesResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Category[] | null | Promise<Category[] | null>;

  export interface Type {
    allProducts: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Product[] | null | Promise<Product[] | null>;

    allCategories: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Category[] | null | Promise<Category[] | null>;
  }
}

export namespace ProductResolvers {
  export const defaultResolvers = {
    id: (parent: Product) => parent.id,
    imageUrl: (parent: Product) => parent.imageUrl,
    name: (parent: Product) => parent.name,
    price: (parent: Product) => parent.price,
    description: (parent: Product) => parent.description
  };

  export type IdResolver = (
    parent: Product,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: Product,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type PriceResolver = (
    parent: Product,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type DescriptionResolver = (
    parent: Product,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type ImageUrlResolver = (
    parent: Product,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type CategoryResolver = (
    parent: Product,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Category | null | Promise<Category | null>;

  export interface Type {
    id: (
      parent: Product,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: Product,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    price: (
      parent: Product,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    description: (
      parent: Product,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    imageUrl: (
      parent: Product,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    category: (
      parent: Product,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Category | null | Promise<Category | null>;
  }
}

export namespace CategoryResolvers {
  export const defaultResolvers = {
    id: (parent: Category) => parent.id,
    name: (parent: Category) => parent.name
  };

  export type IdResolver = (
    parent: Category,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: Category,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type ProductsResolver = (
    parent: Category,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Product[] | Promise<Product[]>;

  export interface Type {
    id: (
      parent: Category,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: Category,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    products: (
      parent: Category,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Product[] | Promise<Product[]>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Product: ProductResolvers.Type;
  Category: CategoryResolvers.Type;
}
